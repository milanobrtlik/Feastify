// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SalatyAPI;
using SalatyAPI.Contest.Entity;

#nullable disable

namespace SalatyAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "contest_state", new[] { "preparing", "not_started", "ongoing", "evaluating", "evaluated" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SalatyAPI.Competitor.Entity.Competitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContestId")
                        .HasColumnType("integer")
                        .HasColumnName("contest_id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_competitor");

                    b.HasIndex("ContestId")
                        .HasDatabaseName("ix_competitor_contest_id");

                    b.ToTable("competitor", (string)null);
                });

            modelBuilder.Entity("SalatyAPI.Contest.Entity.Contest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<ContestState>("State")
                        .HasColumnType("contest_state")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("pk_contest");

                    b.ToTable("contest", (string)null);
                });

            modelBuilder.Entity("SalatyAPI.Criteria.Entity.Criteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContestId")
                        .HasColumnType("integer")
                        .HasColumnName("contest_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Weight")
                        .HasColumnType("integer")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_criteria");

                    b.HasIndex("ContestId")
                        .HasDatabaseName("ix_criteria_contest_id");

                    b.ToTable("criteria", (string)null);
                });

            modelBuilder.Entity("SalatyAPI.User.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_user_name");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("SalatyAPI.UserRating.Entity.UserRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompetitorId")
                        .HasColumnType("integer")
                        .HasColumnName("competitor_id");

                    b.Property<int>("CriteriaId")
                        .HasColumnType("integer")
                        .HasColumnName("criteria_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_rating");

                    b.HasIndex("CompetitorId")
                        .HasDatabaseName("ix_user_rating_competitor_id");

                    b.HasIndex("CriteriaId")
                        .HasDatabaseName("ix_user_rating_criteria_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_rating_user_id");

                    b.ToTable("user_rating", (string)null);
                });

            modelBuilder.Entity("SalatyAPI.Competitor.Entity.Competitor", b =>
                {
                    b.HasOne("SalatyAPI.Contest.Entity.Contest", "Contest")
                        .WithMany("Competitors")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_competitor_contest_contest_id");

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("SalatyAPI.Criteria.Entity.Criteria", b =>
                {
                    b.HasOne("SalatyAPI.Contest.Entity.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_criteria_contest_contest_id");

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("SalatyAPI.UserRating.Entity.UserRating", b =>
                {
                    b.HasOne("SalatyAPI.Competitor.Entity.Competitor", "Competitor")
                        .WithMany("UserRatings")
                        .HasForeignKey("CompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_rating_competitor_competitor_id");

                    b.HasOne("SalatyAPI.Criteria.Entity.Criteria", "Criteria")
                        .WithMany()
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_rating_criteria_criteria_id");

                    b.HasOne("SalatyAPI.User.Entity.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_rating_user_user_id");

                    b.Navigation("Competitor");

                    b.Navigation("Criteria");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SalatyAPI.Competitor.Entity.Competitor", b =>
                {
                    b.Navigation("UserRatings");
                });

            modelBuilder.Entity("SalatyAPI.Contest.Entity.Contest", b =>
                {
                    b.Navigation("Competitors");
                });

            modelBuilder.Entity("SalatyAPI.User.Entity.User", b =>
                {
                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
